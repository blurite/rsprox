package net.rsprox.transcriber

import net.rsprot.protocol.Prot
import net.rsprot.protocol.message.IncomingMessage
import net.rsprox.protocol.game.incoming.decoder.prot.GameClientProt
import net.rsprox.protocol.game.outgoing.decoder.prot.GameServerProt
import net.rsprox.protocol.game.outgoing.model.map.RebuildLogin

@Suppress("DEPRECATION")
public class TranscriberPlugin(
    public val transcriber: Transcriber,
) : TranscriberRunner {
    private inline fun <reified T> pass(
        value: IncomingMessage,
        block: Transcriber.(instance: T) -> Unit,
    ) {
        transcriber.onTranscribeStart()
        try {
            block(transcriber, value as T)
        } finally {
            transcriber.onTranscribeEnd()
        }
    }

    override fun onServerPacket(
        prot: Prot,
        message: IncomingMessage,
    ) {
        check(prot is GameServerProt) {
            "Invalid prot type: $prot"
        }
        // Special exception as it has its own dedicated class
        if (message is RebuildLogin) {
            transcriber.setCurrentProt(GameServerProt.REBUILD_NORMAL)
            pass(message, Transcriber::rebuildLogin)
            return
        }
        transcriber.setCurrentProt(prot)
        when (prot) {
            GameServerProt.IF_RESYNC -> pass(message, Transcriber::ifResync)
            GameServerProt.IF_OPENTOP -> pass(message, Transcriber::ifOpenTop)
            GameServerProt.IF_OPENSUB -> pass(message, Transcriber::ifOpenSub)
            GameServerProt.IF_CLOSESUB -> pass(message, Transcriber::ifCloseSub)
            GameServerProt.IF_MOVESUB -> pass(message, Transcriber::ifMoveSub)
            GameServerProt.IF_CLEARINV -> pass(message, Transcriber::ifClearInv)
            GameServerProt.IF_SETEVENTS -> pass(message, Transcriber::ifSetEvents)
            GameServerProt.IF_SETPOSITION -> pass(message, Transcriber::ifSetPosition)
            GameServerProt.IF_SETSCROLLPOS -> pass(message, Transcriber::ifSetScrollPos)
            GameServerProt.IF_SETROTATESPEED -> pass(message, Transcriber::ifSetRotateSpeed)
            GameServerProt.IF_SETTEXT -> pass(message, Transcriber::ifSetText)
            GameServerProt.IF_SETHIDE -> pass(message, Transcriber::ifSetHide)
            GameServerProt.IF_SETANGLE -> pass(message, Transcriber::ifSetAngle)
            GameServerProt.IF_SETOBJECT -> pass(message, Transcriber::ifSetObject)
            GameServerProt.IF_SETCOLOUR -> pass(message, Transcriber::ifSetColour)
            GameServerProt.IF_SETANIM -> pass(message, Transcriber::ifSetAnim)
            GameServerProt.IF_SETNPCHEAD -> pass(message, Transcriber::ifSetNpcHead)
            GameServerProt.IF_SETNPCHEAD_ACTIVE -> pass(message, Transcriber::ifSetNpcHeadActive)
            GameServerProt.IF_SETPLAYERHEAD -> pass(message, Transcriber::ifSetPlayerHead)
            GameServerProt.IF_SETMODEL -> pass(message, Transcriber::ifSetModel)
            GameServerProt.IF_SETPLAYERMODEL_BASECOLOUR -> pass(message, Transcriber::ifSetPlayerModelBaseColour)
            GameServerProt.IF_SETPLAYERMODEL_BODYTYPE -> pass(message, Transcriber::ifSetPlayerModelBodyType)
            GameServerProt.IF_SETPLAYERMODEL_OBJ -> pass(message, Transcriber::ifSetPlayerModelObj)
            GameServerProt.IF_SETPLAYERMODEL_SELF -> pass(message, Transcriber::ifSetPlayerModelSelf)
            GameServerProt.MIDI_SONG_V2 -> pass(message, Transcriber::midiSongV2)
            GameServerProt.MIDI_SONG_WITHSECONDARY -> pass(message, Transcriber::midiSongWithSecondary)
            GameServerProt.MIDI_SWAP -> pass(message, Transcriber::midiSwap)
            GameServerProt.MIDI_SONG_STOP -> pass(message, Transcriber::midiSongStop)
            GameServerProt.MIDI_SONG_V1 -> pass(message, Transcriber::midiSongV1)
            GameServerProt.MIDI_JINGLE -> pass(message, Transcriber::midiJingle)
            GameServerProt.SYNTH_SOUND -> pass(message, Transcriber::synthSound)
            GameServerProt.UPDATE_ZONE_FULL_FOLLOWS -> pass(message, Transcriber::updateZoneFullFollows)
            GameServerProt.UPDATE_ZONE_PARTIAL_FOLLOWS -> pass(message, Transcriber::updateZonePartialFollows)
            GameServerProt.UPDATE_ZONE_PARTIAL_ENCLOSED -> pass(message, Transcriber::updateZonePartialEnclosed)
            GameServerProt.LOC_ADD_CHANGE -> pass(message, Transcriber::locAddChange)
            GameServerProt.LOC_DEL -> pass(message, Transcriber::locDel)
            GameServerProt.LOC_ANIM -> pass(message, Transcriber::locAnim)
            GameServerProt.LOC_MERGE -> pass(message, Transcriber::locMerge)
            GameServerProt.OBJ_ADD -> pass(message, Transcriber::objAdd)
            GameServerProt.OBJ_DEL -> pass(message, Transcriber::objDel)
            GameServerProt.OBJ_COUNT -> pass(message, Transcriber::objCount)
            GameServerProt.OBJ_ENABLED_OPS -> pass(message, Transcriber::objEnabledOps)
            GameServerProt.MAP_ANIM -> pass(message, Transcriber::mapAnim)
            GameServerProt.MAP_PROJANIM -> pass(message, Transcriber::mapProjAnim)
            GameServerProt.SOUND_AREA -> pass(message, Transcriber::soundArea)
            GameServerProt.PROJANIM_SPECIFIC_V3 -> pass(message, Transcriber::projAnimSpecificV3)
            GameServerProt.PROJANIM_SPECIFIC_V2 -> throw IllegalArgumentException("Unimplemented packet")
            GameServerProt.PROJANIM_SPECIFIC_V1 -> throw IllegalArgumentException("Unimplemented packet")
            GameServerProt.MAP_ANIM_SPECIFIC -> pass(message, Transcriber::mapAnimSpecific)
            GameServerProt.LOC_ANIM_SPECIFIC -> pass(message, Transcriber::locAnimSpecific)
            GameServerProt.NPC_HEADICON_SPECIFIC -> pass(message, Transcriber::npcHeadIconSpecific)
            GameServerProt.NPC_SPOTANIM_SPECIFIC -> pass(message, Transcriber::npcSpotAnimSpecific)
            GameServerProt.NPC_ANIM_SPECIFIC -> pass(message, Transcriber::npcAnimSpecific)
            GameServerProt.PLAYER_ANIM_SPECIFIC -> pass(message, Transcriber::playerAnimSpecific)
            GameServerProt.PLAYER_SPOTANIM_SPECIFIC -> pass(message, Transcriber::playerSpotAnimSpecific)
            GameServerProt.PLAYER_INFO -> pass(message, Transcriber::playerInfo)
            GameServerProt.NPC_INFO_SMALL_V5 -> pass(message, Transcriber::npcInfoV5)
            GameServerProt.NPC_INFO_LARGE_V5 -> pass(message, Transcriber::npcInfoV5)
            GameServerProt.SET_NPC_UPDATE_ORIGIN -> pass(message, Transcriber::setNpcUpdateOrigin)
            GameServerProt.CLEAR_ENTITIES -> pass(message, Transcriber::clearEntities)
            GameServerProt.SET_ACTIVE_WORLD -> pass(message, Transcriber::setActiveWorld)
            GameServerProt.WORLDENTITY_INFO_V3 -> pass(message, Transcriber::worldEntityInfoV3)
            GameServerProt.WORLDENTITY_INFO_V2 -> throw IllegalArgumentException("Unimplemented packet")
            GameServerProt.WORLDENTITY_INFO_V1 -> throw IllegalArgumentException("Unimplemented packet")
            GameServerProt.REBUILD_NORMAL -> pass(message, Transcriber::rebuildNormal)
            GameServerProt.REBUILD_REGION -> pass(message, Transcriber::rebuildRegion)
            GameServerProt.REBUILD_WORLDENTITY -> pass(message, Transcriber::rebuildWorldEntity)
            GameServerProt.VARP_SMALL -> pass(message, Transcriber::varpSmall)
            GameServerProt.VARP_LARGE -> pass(message, Transcriber::varpLarge)
            GameServerProt.VARP_RESET -> pass(message, Transcriber::varpReset)
            GameServerProt.VARP_SYNC -> pass(message, Transcriber::varpSync)
            GameServerProt.CAM_SHAKE -> pass(message, Transcriber::camShake)
            GameServerProt.CAM_RESET -> pass(message, Transcriber::camReset)
            GameServerProt.CAM_SMOOTHRESET -> pass(message, Transcriber::camSmoothReset)
            GameServerProt.CAM_MOVETO -> pass(message, Transcriber::camMoveTo)
            GameServerProt.CAM_MOVETO_CYCLES -> pass(message, Transcriber::camMoveToCycles)
            GameServerProt.CAM_MOVETO_ARC -> pass(message, Transcriber::camMoveToArc)
            GameServerProt.CAM_LOOKAT -> pass(message, Transcriber::camLookAt)
            GameServerProt.CAM_LOOKAT_EASED_COORD -> pass(message, Transcriber::camLookAtEasedCoord)
            GameServerProt.CAM_ROTATEBY -> pass(message, Transcriber::camRotateBy)
            GameServerProt.CAM_ROTATETO -> pass(message, Transcriber::camRotateTo)
            GameServerProt.CAM_MODE -> pass(message, Transcriber::camMode)
            GameServerProt.CAM_TARGET_V2 -> pass(message, Transcriber::camTargetV2)
            GameServerProt.CAM_TARGET_V1 -> pass(message, Transcriber::camTargetV1)
            GameServerProt.OCULUS_SYNC -> pass(message, Transcriber::oculusSync)
            GameServerProt.UPDATE_INV_FULL -> pass(message, Transcriber::updateInvFull)
            GameServerProt.UPDATE_INV_PARTIAL -> pass(message, Transcriber::updateInvPartial)
            GameServerProt.UPDATE_INV_STOPTRANSMIT -> pass(message, Transcriber::updateInvStopTransmit)
            GameServerProt.MESSAGE_PRIVATE -> pass(message, Transcriber::messagePrivate)
            GameServerProt.MESSAGE_PRIVATE_ECHO -> pass(message, Transcriber::messagePrivateEcho)
            GameServerProt.FRIENDLIST_LOADED -> pass(message, Transcriber::friendListLoaded)
            GameServerProt.UPDATE_FRIENDLIST -> pass(message, Transcriber::updateFriendList)
            GameServerProt.UPDATE_IGNORELIST -> pass(message, Transcriber::updateIgnoreList)
            GameServerProt.UPDATE_FRIENDCHAT_CHANNEL_FULL_V1 -> {
                pass(message, Transcriber::updateFriendChatChannelFullV1)
            }
            GameServerProt.UPDATE_FRIENDCHAT_CHANNEL_FULL_V2 -> {
                pass(message, Transcriber::updateFriendChatChannelFullV2)
            }
            GameServerProt.UPDATE_FRIENDCHAT_CHANNEL_SINGLEUSER -> {
                pass(message, Transcriber::updateFriendChatChannelSingleUser)
            }
            GameServerProt.MESSAGE_FRIENDCHANNEL -> pass(message, Transcriber::messageFriendChannel)
            GameServerProt.VARCLAN -> pass(message, Transcriber::varClan)
            GameServerProt.VARCLAN_ENABLE -> pass(message, Transcriber::varClanEnable)
            GameServerProt.VARCLAN_DISABLE -> pass(message, Transcriber::varClanDisable)
            GameServerProt.CLANCHANNEL_FULL -> pass(message, Transcriber::clanChannelFull)
            GameServerProt.CLANCHANNEL_DELTA -> pass(message, Transcriber::clanChannelDelta)
            GameServerProt.CLANSETTINGS_FULL -> pass(message, Transcriber::clanSettingsFull)
            GameServerProt.CLANSETTINGS_DELTA -> pass(message, Transcriber::clanSettingsDelta)
            GameServerProt.MESSAGE_CLANCHANNEL -> pass(message, Transcriber::messageClanChannel)
            GameServerProt.MESSAGE_CLANCHANNEL_SYSTEM -> pass(message, Transcriber::messageClanChannelSystem)
            GameServerProt.LOGOUT -> pass(message, Transcriber::logout)
            GameServerProt.LOGOUT_WITHREASON -> pass(message, Transcriber::logoutWithReason)
            GameServerProt.LOGOUT_TRANSFER -> pass(message, Transcriber::logoutTransfer)
            GameServerProt.UPDATE_RUNWEIGHT -> pass(message, Transcriber::updateRunWeight)
            GameServerProt.UPDATE_RUNENERGY -> pass(message, Transcriber::updateRunEnergy)
            GameServerProt.SET_MAP_FLAG -> pass(message, Transcriber::setMapFlag)
            GameServerProt.SET_PLAYER_OP -> pass(message, Transcriber::setPlayerOp)
            GameServerProt.UPDATE_STAT_V2 -> pass(message, Transcriber::updateStatV2)
            GameServerProt.UPDATE_STAT_V1 -> pass(message, Transcriber::updateStatV1)
            GameServerProt.RUNCLIENTSCRIPT -> pass(message, Transcriber::runClientScript)
            GameServerProt.TRIGGER_ONDIALOGABORT -> pass(message, Transcriber::triggerOnDialogAbort)
            GameServerProt.MESSAGE_GAME -> pass(message, Transcriber::messageGame)
            GameServerProt.CHAT_FILTER_SETTINGS -> pass(message, Transcriber::chatFilterSettings)
            GameServerProt.CHAT_FILTER_SETTINGS_PRIVATECHAT -> pass(message, Transcriber::chatFilterSettingsPrivateChat)
            GameServerProt.UPDATE_TRADINGPOST -> pass(message, Transcriber::updateTradingPost)
            GameServerProt.UPDATE_STOCKMARKET_SLOT -> pass(message, Transcriber::updateStockMarketSlot)
            GameServerProt.HINT_ARROW -> pass(message, Transcriber::hintArrow)
            GameServerProt.RESET_ANIMS -> pass(message, Transcriber::resetAnims)
            GameServerProt.UPDATE_REBOOT_TIMER -> pass(message, Transcriber::updateRebootTimer)
            GameServerProt.SET_HEATMAP_ENABLED -> pass(message, Transcriber::setHeatmapEnabled)
            GameServerProt.MINIMAP_TOGGLE -> pass(message, Transcriber::minimapToggle)
            GameServerProt.SERVER_TICK_END -> pass(message, Transcriber::serverTickEnd)
            GameServerProt.HIDENPCOPS -> pass(message, Transcriber::hideNpcOps)
            GameServerProt.HIDELOCOPS -> pass(message, Transcriber::hideLocOps)
            GameServerProt.URL_OPEN -> pass(message, Transcriber::urlOpen)
            GameServerProt.SITE_SETTINGS -> pass(message, Transcriber::siteSettings)
            GameServerProt.UPDATE_UID192 -> pass(message, Transcriber::updateUid192)
            GameServerProt.REFLECTION_CHECKER -> pass(message, Transcriber::reflectionChecker)
            GameServerProt.SEND_PING -> pass(message, Transcriber::sendPing)
            GameServerProt.HISCORE_REPLY -> pass(message, Transcriber::hiscoreReply)
            GameServerProt.RECONNECT -> pass(message, Transcriber::reconnect)
            GameServerProt.HIDEOBJOPS -> pass(message, Transcriber::hideObjOps)
            GameServerProt.UNKNOWN_STRING -> pass(message, Transcriber::unknownString)
            GameServerProt.NPC_INFO_SMALL_V4 -> throw IllegalArgumentException("Unimplemented packet")
            GameServerProt.NPC_INFO_LARGE_V4 -> throw IllegalArgumentException("Unimplemented packet")
            GameServerProt.OBJ_CUSTOMISE -> pass(message, Transcriber::objCustomise)
            GameServerProt.OBJ_UNCUSTOMISE -> pass(message, Transcriber::objUncustomise)
            GameServerProt.SET_INTERACTION_MODE -> pass(message, Transcriber::setInteractionMode)
            GameServerProt.RESET_INTERACTION_MODE -> pass(message, Transcriber::resetInteractionMode)
        }
    }

    override fun onClientProt(
        prot: Prot,
        message: IncomingMessage,
    ) {
        check(prot is GameClientProt) {
            "Invalid prot: $prot"
        }
        transcriber.setCurrentProt(prot)
        when (prot) {
            GameClientProt.IF_BUTTON -> pass(message, Transcriber::if1Button)
            GameClientProt.IF_BUTTON1 -> pass(message, Transcriber::if3Button)
            GameClientProt.IF_BUTTON2 -> pass(message, Transcriber::if3Button)
            GameClientProt.IF_BUTTON3 -> pass(message, Transcriber::if3Button)
            GameClientProt.IF_BUTTON4 -> pass(message, Transcriber::if3Button)
            GameClientProt.IF_BUTTON5 -> pass(message, Transcriber::if3Button)
            GameClientProt.IF_BUTTON6 -> pass(message, Transcriber::if3Button)
            GameClientProt.IF_BUTTON7 -> pass(message, Transcriber::if3Button)
            GameClientProt.IF_BUTTON8 -> pass(message, Transcriber::if3Button)
            GameClientProt.IF_BUTTON9 -> pass(message, Transcriber::if3Button)
            GameClientProt.IF_BUTTON10 -> pass(message, Transcriber::if3Button)
            GameClientProt.IF_SUBOP -> pass(message, Transcriber::ifSubOp)
            GameClientProt.IF_BUTTOND -> pass(message, Transcriber::ifButtonD)
            GameClientProt.IF_BUTTONT -> pass(message, Transcriber::ifButtonT)
            GameClientProt.OPNPC1 -> pass(message, Transcriber::opNpc)
            GameClientProt.OPNPC2 -> pass(message, Transcriber::opNpc)
            GameClientProt.OPNPC3 -> pass(message, Transcriber::opNpc)
            GameClientProt.OPNPC4 -> pass(message, Transcriber::opNpc)
            GameClientProt.OPNPC5 -> pass(message, Transcriber::opNpc)
            GameClientProt.OPNPC6 -> pass(message, Transcriber::opNpc6)
            GameClientProt.OPNPCT -> pass(message, Transcriber::opNpcT)
            GameClientProt.OPNPCU -> throw IllegalArgumentException("Unimplemented packet: $message")
            GameClientProt.OPLOC1 -> pass(message, Transcriber::opLoc)
            GameClientProt.OPLOC2 -> pass(message, Transcriber::opLoc)
            GameClientProt.OPLOC3 -> pass(message, Transcriber::opLoc)
            GameClientProt.OPLOC4 -> pass(message, Transcriber::opLoc)
            GameClientProt.OPLOC5 -> pass(message, Transcriber::opLoc)
            GameClientProt.OPLOC6 -> pass(message, Transcriber::opLoc6)
            GameClientProt.OPLOCT -> pass(message, Transcriber::opLocT)
            GameClientProt.OPLOCU -> throw IllegalArgumentException("Unimplemented packet: $message")
            GameClientProt.OPOBJ1 -> pass(message, Transcriber::opObj)
            GameClientProt.OPOBJ2 -> pass(message, Transcriber::opObj)
            GameClientProt.OPOBJ3 -> pass(message, Transcriber::opObj)
            GameClientProt.OPOBJ4 -> pass(message, Transcriber::opObj)
            GameClientProt.OPOBJ5 -> pass(message, Transcriber::opObj)
            GameClientProt.OPOBJ6 -> pass(message, Transcriber::opObj6)
            GameClientProt.OPOBJT -> pass(message, Transcriber::opObjT)
            GameClientProt.OPOBJU -> throw IllegalArgumentException("Unimplemented packet: $message")
            GameClientProt.OPPLAYER1 -> pass(message, Transcriber::opPlayer)
            GameClientProt.OPPLAYER2 -> pass(message, Transcriber::opPlayer)
            GameClientProt.OPPLAYER3 -> pass(message, Transcriber::opPlayer)
            GameClientProt.OPPLAYER4 -> pass(message, Transcriber::opPlayer)
            GameClientProt.OPPLAYER5 -> pass(message, Transcriber::opPlayer)
            GameClientProt.OPPLAYER6 -> pass(message, Transcriber::opPlayer)
            GameClientProt.OPPLAYER7 -> pass(message, Transcriber::opPlayer)
            GameClientProt.OPPLAYER8 -> pass(message, Transcriber::opPlayer)
            GameClientProt.OPPLAYERT -> pass(message, Transcriber::opPlayerT)
            GameClientProt.OPPLAYERU -> throw IllegalArgumentException("Unimplemented packet: $message")
            GameClientProt.OPHELD6 -> throw IllegalArgumentException("Unimplemented packet: $message")
            GameClientProt.EVENT_APPLET_FOCUS -> pass(message, Transcriber::eventAppletFocus)
            GameClientProt.EVENT_CAMERA_POSITION -> pass(message, Transcriber::eventCameraPosition)
            GameClientProt.EVENT_KEYBOARD -> pass(message, Transcriber::eventKeyboard)
            GameClientProt.EVENT_MOUSE_SCROLL -> pass(message, Transcriber::eventMouseScroll)
            GameClientProt.EVENT_MOUSE_MOVE -> pass(message, Transcriber::eventMouseMove)
            GameClientProt.EVENT_NATIVE_MOUSE_MOVE -> pass(message, Transcriber::eventNativeMouseMove)
            GameClientProt.EVENT_MOUSE_CLICK -> pass(message, Transcriber::eventMouseClick)
            GameClientProt.EVENT_NATIVE_MOUSE_CLICK -> pass(message, Transcriber::eventNativeMouseClick)
            GameClientProt.RESUME_PAUSEBUTTON -> pass(message, Transcriber::resumePauseButton)
            GameClientProt.RESUME_P_NAMEDIALOG -> pass(message, Transcriber::resumePNameDialog)
            GameClientProt.RESUME_P_STRINGDIALOG -> pass(message, Transcriber::resumePStringDialog)
            GameClientProt.RESUME_P_COUNTDIALOG -> pass(message, Transcriber::resumePCountDialog)
            GameClientProt.RESUME_P_OBJDIALOG -> pass(message, Transcriber::resumePObjDialog)
            GameClientProt.FRIENDCHAT_KICK -> pass(message, Transcriber::friendChatKick)
            GameClientProt.FRIENDCHAT_SETRANK -> pass(message, Transcriber::friendChatSetRank)
            GameClientProt.FRIENDCHAT_JOIN_LEAVE -> pass(message, Transcriber::friendChatJoinLeave)
            GameClientProt.CLANCHANNEL_FULL_REQUEST -> pass(message, Transcriber::clanChannelFullRequest)
            GameClientProt.CLANSETTINGS_FULL_REQUEST -> pass(message, Transcriber::clanSettingsFullRequest)
            GameClientProt.CLANCHANNEL_KICKUSER -> pass(message, Transcriber::clanChannelKickUser)
            GameClientProt.AFFINEDCLANSETTINGS_ADDBANNED_FROMCHANNEL -> {
                pass(message, Transcriber::affinedClanSettingsAddBannedFromChannel)
            }
            GameClientProt.AFFINEDCLANSETTINGS_SETMUTED_FROMCHANNEL -> {
                pass(message, Transcriber::affinedClanSettingsSetMutedFromChannel)
            }
            GameClientProt.FRIENDLIST_ADD -> pass(message, Transcriber::friendListAdd)
            GameClientProt.FRIENDLIST_DEL -> pass(message, Transcriber::friendListDel)
            GameClientProt.IGNORELIST_ADD -> pass(message, Transcriber::ignoreListAdd)
            GameClientProt.IGNORELIST_DEL -> pass(message, Transcriber::ignoreListDel)
            GameClientProt.MESSAGE_PUBLIC -> pass(message, Transcriber::messagePublic)
            GameClientProt.MESSAGE_PRIVATE -> pass(message, Transcriber::messagePrivateClient)
            GameClientProt.MOVE_GAMECLICK -> pass(message, Transcriber::moveGameClick)
            GameClientProt.MOVE_MINIMAPCLICK -> pass(message, Transcriber::moveMinimapClick)
            GameClientProt.CLIENT_CHEAT -> pass(message, Transcriber::clientCheat)
            GameClientProt.SET_CHATFILTERSETTINGS -> pass(message, Transcriber::setChatFilterSettings)
            GameClientProt.CLICKWORLDMAP -> pass(message, Transcriber::clickWorldMap)
            GameClientProt.OCULUS_LEAVE -> pass(message, Transcriber::oculusLeave)
            GameClientProt.CLOSE_MODAL -> pass(message, Transcriber::closeModal)
            GameClientProt.TELEPORT -> pass(message, Transcriber::teleport)
            GameClientProt.BUG_REPORT -> pass(message, Transcriber::bugReport)
            GameClientProt.SEND_SNAPSHOT -> pass(message, Transcriber::sendSnapshot)
            GameClientProt.HISCORE_REQUEST -> pass(message, Transcriber::hiscoreRequest)
            GameClientProt.IF_CRMVIEW_CLICK -> pass(message, Transcriber::ifCrmViewClick)
            GameClientProt.UPDATE_PLAYER_MODEL_V1 -> pass(message, Transcriber::updatePlayerModelV1)
            GameClientProt.UPDATE_PLAYER_MODEL_V2 -> throw IllegalArgumentException("Unexpected packet")
            GameClientProt.CONNECTION_TELEMETRY -> pass(message, Transcriber::connectionTelemetry)
            GameClientProt.SEND_PING_REPLY -> pass(message, Transcriber::sendPingReply)
            GameClientProt.DETECT_MODIFIED_CLIENT -> pass(message, Transcriber::detectModifiedClient)
            GameClientProt.REFLECTION_CHECK_REPLY -> pass(message, Transcriber::reflectionCheckReply)
            GameClientProt.NO_TIMEOUT -> pass(message, Transcriber::noTimeout)
            GameClientProt.IDLE -> pass(message, Transcriber::idle)
            GameClientProt.MAP_BUILD_COMPLETE -> pass(message, Transcriber::mapBuildComplete)
            GameClientProt.MEMBERSHIP_PROMOTION_ELIGIBILITY -> {
                pass(message, Transcriber::membershipPromotionEligibility)
            }
            GameClientProt.SOUND_JINGLEEND -> pass(message, Transcriber::soundJingleEnd)
            GameClientProt.WINDOW_STATUS -> pass(message, Transcriber::windowStatus)
            GameClientProt.SET_HEADING -> pass(message, Transcriber::setHeading)
        }
    }
}
